[
  {
    "name": "strlen",
    "args": [
      {
        "name": "str",
        "type": "const char *"
      }
    ],
    "result": {
      "type": "size_t",
      "flag": "%ld"
    },
    "tests": [
      {
        "name": "valid_test",
        "input": ["\"Hello World!\""],
        "expect": "12"
      },
      {
        "name": "empty_string",
        "input": ["\"\""],
        "expect": "0"
      }
    ]
  },
  {
    "name": "strchr",
    "args": [
      {
        "name": "str",
        "type": "const char *"
      },
      {
        "name": "c",
        "type": "int"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "valid_test",
        "input": ["\"Hello World!\"", "'o'"],
        "expect": "o World!"
      },
      {
        "name": "first_char",
        "input": ["\"Hello Hubert\"", "'H'"],
        "expect": "Hello Hubert"
      },
      {
        "name": "last_char",
        "input": ["\"Hello World!\"", "'!'"],
        "expect": "!"
      },
      {
        "name": "not_found",
        "input": ["\"Hello World!\"", "'z'"],
        "expect": "(null)"
      }
    ]
  },
  {
    "name": "index",
    "args": [
      {
        "name": "str",
        "type": "const char *"
      },
      {
        "name": "c",
        "type": "int"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "valid_test",
        "input": ["\"Hello World!\"", "'o'"],
        "expect": "o World!"
      },
      {
        "name": "first_char",
        "input": ["\"Hello Hubert\"", "'H'"],
        "expect": "Hello Hubert"
      },
      {
        "name": "last_char",
        "input": ["\"Hello World!\"", "'!'"],
        "expect": "!"
      },
      {
        "name": "not_found",
        "input": ["\"Hello World!\"", "'z'"],
        "expect": "(null)"
      }
    ]
  },
  {
    "name": "strrchr",
    "args": [
      {
        "name": "str",
        "type": "const char *"
      },
      {
        "name": "c",
        "type": "int"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "valid_test",
        "input": ["\"Hello World!\"", "'o'"],
        "expect": "orld!"
      },
      {
        "name": "first_char",
        "input": ["\"Hello Hubert\"", "'H'"],
        "expect": "Hubert"
      },
      {
        "name": "last_char",
        "input": ["\"Hello World!\"", "'!'"],
        "expect": "!"
      },
      {
        "name": "not_found",
        "input": ["\"Hello World!\"", "'z'"],
        "expect": "(null)"
      },
      {
        "name": "multiple_occurrences",
        "input": ["\"banana\"", "'a'"],
        "expect": "a"
      },
      {
        "name": "consecutive_occurrences",
        "input": ["\"Mississippi\"", "'s'"],
        "expect": "sippi"
      },
      {
        "name": "null_terminator",
        "input": ["\"Test\"", "'\\0'"],
        "expect": ""
      },
      {
        "name": "one_char_match",
        "input": ["\"X\"", "'X'"],
        "expect": "X"
      },
      {
        "name": "one_char_no_match",
        "input": ["\"X\"", "'Y'"],
        "expect": "(null)"
      },
      {
        "name": "long_string",
        "input": [
          "\"This is a long test string with multiple characters\"",
          "'t'"
        ],
        "expect": "ters"
      }
    ]
  },
  {
    "name": "rindex",
    "args": [
      {
        "name": "str",
        "type": "const char *"
      },
      {
        "name": "c",
        "type": "int"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "valid_test",
        "input": ["\"Hello World!\"", "'o'"],
        "expect": "orld!"
      },
      {
        "name": "first_char",
        "input": ["\"Hello Hubert\"", "'H'"],
        "expect": "Hubert"
      },
      {
        "name": "last_char",
        "input": ["\"Hello World!\"", "'!'"],
        "expect": "!"
      },
      {
        "name": "not_found",
        "input": ["\"Hello World!\"", "'z'"],
        "expect": "(null)"
      },
      {
        "name": "multiple_occurrences",
        "input": ["\"banana\"", "'a'"],
        "expect": "a"
      },
      {
        "name": "consecutive_occurrences",
        "input": ["\"Mississippi\"", "'s'"],
        "expect": "sippi"
      },
      {
        "name": "null_terminator",
        "input": ["\"Test\"", "'\\0'"],
        "expect": ""
      },
      {
        "name": "one_char_match",
        "input": ["\"X\"", "'X'"],
        "expect": "X"
      },
      {
        "name": "one_char_no_match",
        "input": ["\"X\"", "'Y'"],
        "expect": "(null)"
      },
      {
        "name": "long_string",
        "input": [
          "\"This is a long test string with multiple characters\"",
          "'t'"
        ],
        "expect": "ters"
      }
    ]
  },
  {
    "name": "strcmp",
    "args": [
      {
        "name": "s1",
        "type": "const char *"
      },
      {
        "name": "s2",
        "type": "const char *"
      }
    ],
    "result": {
      "type": "int",
      "flag": "%d"
    },
    "tests": [
      {
        "name": "equal_strings",
        "input": ["\"Hello World!\"", "\"Hello World!\""],
        "expect": "0"
      },
      {
        "name": "different_strings",
        "input": ["\"Hello World!\"", "\"Hello Hubert\""],
        "expect": "15"
      },
      {
        "name": "different_strings",
        "input": ["\"Hello World!\"", "\"Hello World\""],
        "expect": "33"
      }
    ]
  },
  {
    "name": "strncmp",
    "args": [
      {
        "name": "s1",
        "type": "const char *"
      },
      {
        "name": "s2",
        "type": "const char *"
      },
      {
        "name": "n",
        "type": "size_t"
      }
    ],
    "result": {
      "type": "int",
      "flag": "%d"
    },
    "tests": [
      {
        "name": "equal_strings",
        "input": ["\"Hello World!\"", "\"Hello World!\"", "12"],
        "expect": "0"
      },
      {
        "name": "different_strings_with_n",
        "input": ["\"Hello World!\"", "\"Hello Hubert\"", "5"],
        "expect": "0"
      },
      {
        "name": "different_strings",
        "input": ["\"Hello World!\"", "\"Hello World\"", "12"],
        "expect": "33"
      }
    ]
  },
  {
    "name": "memmove",
    "args": [
      {
        "name": "dest",
        "type": "void *"
      },
      {
        "name": "src",
        "type": "const void *"
      },
      {
        "name": "n",
        "type": "size_t"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "move_with_partial_overlap_forward",
        "prerequisite": "char var[10] = \"ABCDEFGHI\";",
        "input": ["var + 3", "var", "5"],
        "expect": "ABCDEI"
      },
      {
        "name": "move_with_partial_overlap_backward",
        "prerequisite": "char var[10] = \"ABCDEFGHI\";",
        "input": ["var", "var + 3", "5"],
        "expect": "DEFGHFGHI"
      },
      {
        "name": "move_entire_string_with_overlap",
        "prerequisite": "char var[10] = \"ABCDEFGHI\";",
        "input": ["var + 1", "var", "9"],
        "expect": "ABCDEFGHI"
      },
      {
        "name": "move_same_memory",
        "prerequisite": "char var[6] = \"Hello\";",
        "input": ["var", "var", "5"],
        "expect": "Hello"
      },
      {
        "name": "move_single_character",
        "prerequisite": "char dest[6] = \"Hello\";",
        "input": ["dest + 2", "dest", "1"],
        "expect": "Hlo"
      },
      {
        "name": "move_large_block_of_data",
        "prerequisite": "char var[30] = \"1234567890abcdefghijklmnopqrst\";",
        "input": ["var + 5", "var", "25"],
        "expect": "1234567890abcdefghijklmno"
      },
      {
        "name": "move_entire_block_with_overlap",
        "prerequisite": "char var[20] = \"1234567890abcdefghij\";",
        "input": ["var + 3", "var", "17"],
        "expect": "1234567890abcdefg"
      },
      {
        "name": "move_substring_to_start",
        "prerequisite": "char var[20] = \"Hello, World!\";",
        "input": ["var", "var + 7", "6"],
        "expect": "World! World!"
      },
      {
        "name": "move_with_null_character",
        "prerequisite": "char var[10] = \"ABC\\0DEFGH\";",
        "input": ["var + 2", "var", "5"],
        "expect": "ABC"
      },
      {
        "name": "move_large_n_beyond_buffer",
        "prerequisite": "char dest[10] = \"123456789\";",
        "input": ["dest", "\"ABCDEFGHIJKLM\"", "10"],
        "expect": "ABCDEFGHIJ"
      }
    ]
  },
  {
    "name": "memset",
    "args": [
      {
        "name": "s",
        "type": "void *"
      },
      {
        "name": "c",
        "type": "int"
      },
      {
        "name": "n",
        "type": "size_t"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "fill_string_with_char",
        "prerequisite": "char str[5];",
        "input": ["str", "42", "5"],
        "expect": "*****"
      },
      {
        "name": "reset_string",
        "prerequisite": "char str[5] = \"Hello\";",
        "input": ["str", "0", "5"],
        "expect": ""
      }
    ]
  },
  {
    "name": "memcpy",
    "args": [
      {
        "name": "dest",
        "type": "void *"
      },
      {
        "name": "src",
        "type": "const void *"
      },
      {
        "name": "n",
        "type": "size_t"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "copy_string_into_empty",
        "prerequisite": "char dest[5];",
        "input": ["dest", "\"Hello\"", "5"],
        "expect": "Hello"
      },
      {
        "name": "copy_string_into_existing",
        "prerequisite": "char dest[5] = \"Hello\";",
        "input": ["dest", "\"World!\"", "5"],
        "expect": "World"
      },
      {
        "name": "copy_string_into_existing_with_n",
        "prerequisite": "char dest[5] = \"Hello\";",
        "input": ["dest", "\"World!\"", "3"],
        "expect": "Worlo"
      }
    ]
  },
  {
    "name": "strcasecmp",
    "args": [
      {
        "name": "s1",
        "type": "const char *"
      },
      {
        "name": "s2",
        "type": "const char *"
      }
    ],
    "result": {
      "type": "int",
      "flag": "%d"
    },
    "tests": [
      {
        "name": "equal_strings_case_insensitive",
        "input": ["\"Hello World!\"", "\"hello world!\""],
        "expect": "0"
      },
      {
        "name": "different_strings_case_insensitive",
        "input": ["\"Apple\"", "\"banana\""],
        "expect": "-1"
      },
      {
        "name": "equal_strings_same_case",
        "input": ["\"HELLO\"", "\"HELLO\""],
        "expect": "0"
      },
      {
        "name": "different_strings_different_case",
        "input": ["\"apple\"", "\"APPLE\""],
        "expect": "0"
      },
      {
        "name": "case_sensitive_differently_cased_strings",
        "input": ["\"CaseSensitive\"", "\"casesensitive\""],
        "expect": "0"
      },
      {
        "name": "prefix_match_case_insensitive",
        "input": ["\"prefixTest\"", "\"prefix\""],
        "expect": "116"
      },
      {
        "name": "suffix_match_case_insensitive",
        "input": ["\"testSuffix\"", "\"suffix\""],
        "expect": "1"
      },
      {
        "name": "different_lengths_case_sensitive",
        "input": ["\"abc\"", "\"abcd\""],
        "expect": "-100"
      },
      {
        "name": "empty_string_with_non_empty_string",
        "input": ["\"\"", "\"NonEmpty\""],
        "expect": "-110"
      },
      {
        "name": "non_empty_string_with_empty_string",
        "input": ["\"NonEmpty\"", "\"\""],
        "expect": "110"
      },
      {
        "name": "empty_strings_case_insensitive",
        "input": ["\"\"", "\"\""],
        "expect": "0"
      },
      {
        "name": "strings_with_special_characters",
        "input": ["\"Hello!@#$\"", "\"hello!@#$\""],
        "expect": "0"
      },
      {
        "name": "strings_with_numbers_case_insensitive",
        "input": ["\"Test123\"", "\"test123\""],
        "expect": "0"
      },
      {
        "name": "strings_with_mixed_case",
        "input": ["\"MiXeD@123!\"", "\"mixed@123!\""],
        "expect": "0"
      },
      {
        "name": "strings_with_spaces_case_insensitive",
        "input": ["\"Hello World!\"", "\"hello world!\""],
        "expect": "0"
      },
      {
        "name": "long_strings_case_insensitive",
        "input": ["\"LongStringTestExample\"", "\"longstringtestexample\""],
        "expect": "0"
      }
    ]
  },
  {
    "name": "strstr",
    "args": [
      {
        "name": "haystack",
        "type": "const char *"
      },
      {
        "name": "needle",
        "type": "const char *"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "valid_test",
        "input": ["\"Hello World!\"", "\"World\""],
        "expect": "World!"
      },
      {
        "name": "first_char",
        "input": ["\"Hello Hubert\"", "\"H\""],
        "expect": "Hello Hubert"
      },
      {
        "name": "last_char",
        "input": ["\"Hello World!\"", "\"!\""],
        "expect": "!"
      },
      {
        "name": "not_found",
        "input": ["\"Hello World!\"", "\"z\""],
        "expect": "(null)"
      },
      {
        "name": "multiple_occurrences",
        "input": ["\"banana\"", "\"a\""],
        "expect": "anana"
      },
      {
        "name": "consecutive_occurrences",
        "input": ["\"Mississippi\"", "\"ss\""],
        "expect": "ssissippi"
      },
      {
        "name": "null_terminator",
        "input": ["\"Test\"", "\"\\0\""],
        "expect": "Test"
      },
      {
        "name": "one_char_match",
        "input": ["\"X\"", "\"X\""],
        "expect": "X"
      },
      {
        "name": "one_char_no_match",
        "input": ["\"X\"", "\"Y\""],
        "expect": "(null)"
      },
      {
        "name": "long_string",
        "input": [
          "\"This is a long test string with multiple characters\"",
          "\"ters\""
        ],
        "expect": "ters"
      },
      {
        "name": "empty_haystack",
        "input": ["\"\"", "\"abc\""],
        "expect": "(null)"
      },
      {
        "name": "empty_needle",
        "input": ["\"Hello World!\"", "\"\""],
        "expect": "Hello World!"
      },
      {
        "name": "needle_is_haystack",
        "input": ["\"CompleteMatch\"", "\"CompleteMatch\""],
        "expect": "CompleteMatch"
      },
      {
        "name": "case_sensitivity",
        "input": ["\"Hello World!\"", "\"world\""],
        "expect": "(null)"
      },
      {
        "name": "special_characters",
        "input": ["\"Hello, how are you?\"", "\"how\""],
        "expect": "how are you?"
      },
      {
        "name": "space_in_haystack",
        "input": ["\"   leading spaces\"", "\"leading\""],
        "expect": "leading spaces"
      },
      {
        "name": "two_empty_string",
        "input": ["\"\"", "\"\""],
        "expect": ""
      }
    ]
  },
  {
    "name": "strpbrk",
    "args": [
      {
        "name": "str",
        "type": "const char *"
      },
      {
        "name": "charset",
        "type": "const char *"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "single_match",
        "input": ["\"Hello World!\"", "\"oW\""],
        "expect": "o World!"
      },
      {
        "name": "first_char_match",
        "input": ["\"Hello World!\"", "\"H\""],
        "expect": "Hello World!"
      },
      {
        "name": "last_char_match",
        "input": ["\"Hello World!\"", "\"!d\""],
        "expect": "d!"
      },
      {
        "name": "no_match",
        "input": ["\"Hello World!\"", "\"xyz\""],
        "expect": "(null)"
      },
      {
        "name": "empty_charset",
        "input": ["\"Hello World!\"", "\"\""],
        "expect": "(null)"
      },
      {
        "name": "empty_string",
        "input": ["\"\"", "\"abc\""],
        "expect": "(null)"
      }
    ]
  },
  {
    "name": "strcspn",
    "args": [
      {
        "name": "str",
        "type": "const char *"
      },
      {
        "name": "charset",
        "type": "const char *"
      }
    ],
    "result": {
      "type": "size_t",
      "flag": "%ld"
    },
    "tests": [
      {
        "name": "single_match",
        "input": ["\"Hello World!\"", "\"oW\""],
        "expect": "4"
      },
      {
        "name": "first_char_match",
        "input": ["\"Hello World!\"", "\"H\""],
        "expect": "0"
      },
      {
        "name": "last_char_match",
        "input": ["\"Hello World!\"", "\"!d\""],
        "expect": "10"
      },
      {
        "name": "no_match",
        "input": ["\"Hello World!\"", "\"xyz\""],
        "expect": "12"
      },
      {
        "name": "multiple_occurrences",
        "input": ["\"banana\"", "\"an\""],
        "expect": "1"
      },
      {
        "name": "empty_charset",
        "input": ["\"Hello World!\"", "\"\""],
        "expect": "12"
      },
      {
        "name": "empty_string",
        "input": ["\"\"", "\"abc\""],
        "expect": "0"
      }
    ]
  },
  {
    "name": "memfrob",
    "args": [
      {
        "name": "s",
        "type": "void *"
      },
      {
        "name": "n",
        "type": "size_t"
      }
    ],
    "result": {
      "type": "char *",
      "flag": "%s"
    },
    "tests": [
      {
        "name": "valid_test",
        "prerequisite": "char str[5] = \"Hello\";",
        "input": ["str", "5"],
        "expect": "bOFFE"
      },
      {
        "name": "size_zero",
        "prerequisite": "char str[5] = \"Hello\";",
        "input": ["str", "0"],
        "expect": "Hello"
      }
    ]
  },
  {
    "name": "ffs",
    "args": [
      {
        "name": "i",
        "type": "int"
      }
    ],
    "result": {
      "type": "int",
      "flag": "%d"
    },
    "tests": [
      {
        "name": "zero",
        "input": ["0"],
        "expect": "0"
      },
      {
        "name": "one",
        "input": ["1"],
        "expect": "1"
      },
      {
        "name": "negative_one",
        "input": ["-1"],
        "expect": "1"
      },
      {
        "name": "negative_two",
        "input": ["-2"],
        "expect": "2"
      },
      {
        "name": "negative_four",
        "input": ["-4"],
        "expect": "3"
      },
      {
        "name": "negative_eight",
        "input": ["-8"],
        "expect": "4"
      },
      {
        "name": "negative_sixteen",
        "input": ["-16"],
        "expect": "5"
      },
      {
        "name": "negative_thirty_two",
        "input": ["-32"],
        "expect": "6"
      },
      {
        "name": "negative_sixty_four",
        "input": ["-64"],
        "expect": "7"
      },
      {
        "name": "negative_one_hundred_twenty_eight",
        "input": ["-128"],
        "expect": "8"
      },
      {
        "name": "negative_two_hundred_fifty_six",
        "input": ["-256"],
        "expect": "9"
      },
      {
        "name": "negative_five_hundred_twelve",
        "input": ["-512"],
        "expect": "10"
      },
      {
        "name": "negative_one_thousand_twenty_four",
        "input": ["-1024"],
        "expect": "11"
      },
      {
        "name": "negative_two_thousand_forty_eight",
        "input": ["-2048"],
        "expect": "12"
      },
      {
        "name": "negative_four_thousand_ninety_six",
        "input": ["-4096"],
        "expect": "13"
      }
    ]
  }
]
